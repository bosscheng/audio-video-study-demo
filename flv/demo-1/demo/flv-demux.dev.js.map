{"version":3,"file":"flv-demux.dev.js","sources":["../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/createClass.js","../src/flv/flvTag.js","../src/utils/decodeUTF8.js","../src/flv/flvdemux.js","../src/flv/media-info.js","../src/flv/exp-golomb.js","../src/flv/sps-parser.js","../src/flv/tagDemux.js","../src/flv/flvParse.js","../src/flv/tagdemux.js","../src/mp4/mp4remux.js","../src/mp4/aac-silent.js","../src/utils/browser.js","../src/mp4/media-segment-info.js","../src/mp4/mp4moof.js","../src/flv2fmp4.js","../src/flvEnter.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export default class FlvTag {\n    constructor() {\n        this.tagType = -1;\n        this.dataSize = -1;\n        this.Timestamp = -1;\n        this.StreamID = -1;\n        this.body = -1;\n        this.time = -1;\n        this.arr = [];\n    }\n    getTime() {\n        // this.Timestamp.pop();\n        this.arr = [];\n        for (let i = 0; i < this.Timestamp.length; i++) {\n            this.arr.push((this.Timestamp[i].toString(16).length == 1 ? '0' + this.Timestamp[i].toString(16) : this.Timestamp[i].toString(16)));\n        }\n        this.arr.pop();\n        const time = this.arr.join('');\n        this.time = parseInt(time, 16);\n        return parseInt(time, 16);\n    }\n}\n","function decodeUTF8(uint8array) {\n    const out = [];\n    const input = uint8array;\n    let i = 0;\n    const length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |\n                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    let array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80)\n                return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\nexport default decodeUTF8;\n\n","import decodeUTF8 from '../utils/decodeUTF8';\nconst le = (function() {\n    const buf = new ArrayBuffer(2);\n    (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n    return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n})();\nexport default class flvDemux {\n\n    constructor() {\n\n    }\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\n\n        const name = flvDemux.parseString(arrayBuffer, dataOffset, dataSize);\n        const value = flvDemux.parseScript(arrayBuffer, dataOffset + name.size);\n        const isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: value.size,\n            objectEnd: isObjectEnd\n        };\n    }\n\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\n        return flvDemux.parseObject(arrayBuffer, dataOffset, dataSize);\n    }\n    static parseLongString(arrayBuffer, dataOffset, dataSize) {\n\n        const v = new DataView(arrayBuffer, dataOffset);\n        const length = v.getUint32(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 4 + length\n        };\n    }\n    static parseDate(arrayBuffer, dataOffset, dataSize) {\n\n        const v = new DataView(arrayBuffer, dataOffset);\n        let timestamp = v.getFloat64(0, !le);\n        const localTimeOffset = v.getInt16(8, !le);\n        timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n        return {\n            data: new Date(timestamp),\n            size: 8 + 2\n        };\n    }\n    static parseString(arrayBuffer, dataOffset, dataSize) {\n        const v = new DataView(arrayBuffer, dataOffset);\n        const length = v.getUint16(0, !le);\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n        } else {\n            str = '';\n        }\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n\n    /**\n     * 解析metadata\n     */\n    static parseMetadata(arr) {\n        const name = flvDemux.parseScript(arr, 0);\n        const value = flvDemux.parseScript(arr, name.size, arr.length - name.size);\n        // return {}\n        const data = {};\n        data[name.data] = value.data;\n        return data;\n    }\n\n    static parseScript(arr, offset, dataSize) {\n        let dataOffset = offset;\n        const object = {};\n        const uint8 = new Uint8Array(arr);\n        const buffer = uint8.buffer;\n        const dv = new DataView(buffer, 0, dataSize);\n        let value = null;\n        let objectEnd = false;\n        const type = (dv.getUint8(dataOffset));\n        dataOffset += 1;\n\n        switch (type) {\n            case 0: // Number(Double) type\n                value = dv.getFloat64(dataOffset, !le);\n                dataOffset += 8;\n                break;\n            case 1:\n                { // Boolean type\n                    const b = dv.getUint8(dataOffset);\n                    value = !!b;\n                    dataOffset += 1;\n                    break;\n                }\n            case 2:\n                { // String type\n                    // dataOffset += 1;\n                    const amfstr = flvDemux.parseString(buffer, dataOffset);\n                    value = amfstr.data;\n                    dataOffset += amfstr.size;\n                    break;\n                }\n            case 3:\n\n                { // Object(s) type\n                    value = {};\n                    let terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (offset < dataSize - 4) { // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                        const amfobj = flvDemux.parseObject(buffer, dataOffset, dataSize - offset - terminal);\n\n                        if (amfobj.objectEnd) { break; }\n                        value[amfobj.data.name] = amfobj.data.value;\n                        // dataOffset += amfobj.size;\n                        dataOffset = amfobj.size;\n                    }\n                    if (offset <= dataSize - 3) {\n                        const marker = v.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 8:\n                { // ECMA array type (Mixed array)\n                    value = {};\n                    // dataOffset += 1;\n                    dataOffset += 4; // ECMAArrayLength(UI32)\n                    let terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (dataOffset < dataSize - 8) { // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                        const amfvar = flvDemux.parseVariable(buffer, dataOffset);\n\n                        if (amfvar.objectEnd) { break; }\n                        value[amfvar.data.name] = amfvar.data.value;\n                        dataOffset = amfvar.size;\n                    }\n                    if (dataOffset <= dataSize - 3) {\n                        const marker = dv.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 9: // ScriptDataObjectEnd\n                value = undefined;\n                dataOffset = 1;\n                objectEnd = true;\n                break;\n            case 10:\n                { // Strict array type\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                    value = [];\n                    const strictArrayLength = dv.getUint32(dataOffset, !le);\n                    dataOffset += 4;\n                    for (let i = 0; i < strictArrayLength; i++) {\n                        const val = flvDemux.parseScript(buffer, dataOffset);\n                        value.push(val.data);\n                        dataOffset = val.size;\n                    }\n                    break;\n                }\n            case 11:\n                { // Date type\n                    const date = flvDemux.parseDate(buffer, dataOffset + 1, dataSize - 1);\n                    value = date.data;\n                    dataOffset += date.size;\n                    break;\n                }\n            case 12:\n                { // Long string type\n                    const amfLongStr = flvDemux.parseString(buffer, dataOffset + 1, dataSize - 1);\n                    value = amfLongStr.data;\n                    dataOffset += amfLongStr.size;\n                    break;\n                }\n            default:\n                // ignore and skip\n                dataOffset = dataSize;\n                console.log('AMF', 'Unsupported AMF value type ' + type);\n        }\n        return {\n            data: value,\n            size: dataOffset,\n        };\n    }\n}\n","\nclass MediaInfo {\n\n    constructor() {\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    isComplete() {\n        const audioInfoComplete = (this.hasAudio === false) ||\n            (this.hasAudio === true &&\n                this.audioCodec != null &&\n                this.audioSampleRate != null &&\n                this.audioChannelCount != null);\n\n        const videoInfoComplete = (this.hasVideo === false) ||\n            (this.hasVideo === true &&\n                this.videoCodec != null &&\n                this.width != null &&\n                this.height != null &&\n                this.fps != null &&\n                this.profile != null &&\n                this.level != null &&\n                this.chromaFormat != null &&\n                this.sarNum != null &&\n                this.sarDen != null);\n\n        // keyframesIndex may not be present\n        return this.mimeType != null &&\n            this.duration != null &&\n            this.metadata != null &&\n            this.hasKeyframesIndex != null &&\n            audioInfoComplete &&\n            videoInfoComplete;\n    }\n\n    isSeekable() {\n        return this.hasKeyframesIndex === true;\n    }\n}\n\nexport default MediaInfo;\n","\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = this.constructor.name;\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        const buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0) { throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available'); }\n\n        const bytes_read = Math.min(4, buffer_bytes_left);\n        const word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32) { throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!'); }\n\n        if (bits <= this._current_word_bits_left) {\n            const result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        const bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        const bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        const result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if ((this._current_word & (0x80000000 >>> zero_count)) !== 0) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() { // unsigned exponential golomb\n        const leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() { // signed exponential golomb\n        const value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;\n","\nimport ExpGolomb from './exp-golomb.js';\n\nclass SPSParser {\n\n    static _ebsp2rbsp(uint8array) {\n        const src = uint8array;\n        const src_length = src.byteLength;\n        const dst = new Uint8Array(src_length);\n        let dst_idx = 0;\n\n        for (let i = 0; i < src_length; i++) {\n            if (i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dst_idx] = src[i];\n            dst_idx++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dst_idx);\n    }\n\n    static parseSPS(uint8array) {\n        const rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb = new ExpGolomb(rbsp);\n\n        gb.readByte();\n        const profile_idc = gb.readByte(); // profile_idc\n        gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n        const level_idc = gb.readByte(); // level_idc\n        gb.readUEG(); // seq_parameter_set_id\n\n        const profile_string = SPSParser.getProfileString(profile_idc);\n        const level_string = SPSParser.getLevelString(level_idc);\n        let chroma_format_idc = 1;\n        let chroma_format = 420;\n        const chroma_format_table = [0, 420, 422, 444];\n        let bit_depth = 8;\n\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\n            profile_idc === 138 || profile_idc === 144) {\n\n            chroma_format_idc = gb.readUEG();\n            if (chroma_format_idc === 3) {\n                gb.readBits(1); // separate_colour_plane_flag\n            }\n            if (chroma_format_idc <= 3) {\n                chroma_format = chroma_format_table[chroma_format_idc];\n            }\n\n            bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n            gb.readUEG(); // bit_depth_chroma_minus8\n            gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n            if (gb.readBool()) { // seq_scaling_matrix_present_flag\n                const scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\n                for (let i = 0; i < scaling_list_count; i++) {\n                    if (gb.readBool()) { // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        gb.readUEG(); // log2_max_frame_num_minus4\n        const pic_order_cnt_type = gb.readUEG();\n        if (pic_order_cnt_type === 0) {\n            gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (pic_order_cnt_type === 1) {\n            gb.readBits(1); // delta_pic_order_always_zero_flag\n            gb.readSEG(); // offset_for_non_ref_pic\n            gb.readSEG(); // offset_for_top_to_bottom_field\n            const num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                gb.readSEG(); // offset_for_ref_frame\n            }\n        }\n        gb.readUEG(); // max_num_ref_frames\n        gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        const pic_width_in_mbs_minus1 = gb.readUEG();\n        const pic_height_in_map_units_minus1 = gb.readUEG();\n\n        const frame_mbs_only_flag = gb.readBits(1);\n        if (frame_mbs_only_flag === 0) {\n            gb.readBits(1); // mb_adaptive_frame_field_flag\n        }\n        gb.readBits(1); // direct_8x8_inference_flag\n\n        let frame_crop_left_offset = 0;\n        let frame_crop_right_offset = 0;\n        let frame_crop_top_offset = 0;\n        let frame_crop_bottom_offset = 0;\n\n        const frame_cropping_flag = gb.readBool();\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = gb.readUEG();\n            frame_crop_right_offset = gb.readUEG();\n            frame_crop_top_offset = gb.readUEG();\n            frame_crop_bottom_offset = gb.readUEG();\n        }\n\n        let sar_width = 1,\n            sar_height = 1;\n        let fps = 0,\n            fps_fixed = true,\n            fps_num = 0,\n            fps_den = 0;\n\n        const vui_parameters_present_flag = gb.readBool();\n        if (vui_parameters_present_flag) {\n            if (gb.readBool()) { // aspect_ratio_info_present_flag\n                const aspect_ratio_idc = gb.readByte();\n                const sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                const sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\n                } else if (aspect_ratio_idc === 255) {\n                    sar_width = gb.readByte() << 8 | gb.readByte();\n                    sar_height = gb.readByte() << 8 | gb.readByte();\n                }\n            }\n\n            if (gb.readBool()) { // overscan_info_present_flag\n                gb.readBool(); // overscan_appropriate_flag\n            }\n            if (gb.readBool()) { // video_signal_type_present_flag\n                gb.readBits(4); // video_format & video_full_range_flag\n                if (gb.readBool()) { // colour_description_present_flag\n                    gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if (gb.readBool()) { // chroma_loc_info_present_flag\n                gb.readUEG(); // chroma_sample_loc_type_top_field\n                gb.readUEG(); // chroma_sample_loc_type_bottom_field\n            }\n            if (gb.readBool()) { // timing_info_present_flag\n                const num_units_in_tick = gb.readBits(32);\n                const time_scale = gb.readBits(32);\n                fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                fps_num = time_scale;\n                fps_den = num_units_in_tick * 2;\n                fps = fps_num / fps_den;\n            }\n        }\n\n        let sarScale = 1;\n        if (sar_width !== 1 || sar_height !== 1) {\n            sarScale = sar_width / sar_height;\n        }\n\n        let crop_unit_x = 0,\n            crop_unit_y = 0;\n        if (chroma_format_idc === 0) {\n            crop_unit_x = 1;\n            crop_unit_y = 2 - frame_mbs_only_flag;\n        } else {\n            const sub_wc = (chroma_format_idc === 3) ? 1 : 2;\n            const sub_hc = (chroma_format_idc === 1) ? 2 : 1;\n            crop_unit_x = sub_wc;\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n        }\n\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n        const present_width = Math.ceil(codec_width * sarScale);\n\n        gb.destroy();\n        gb = null;\n\n        return {\n            profile_string, // baseline, high, high10, ...\n            level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bit_depth, // 8bit, 10bit, ...\n            chroma_format, // 4:2:0, 4:2:2, ...\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n            frame_rate: {\n                fixed: fps_fixed,\n                fps,\n                fps_den,\n                fps_num\n            },\n\n            sar_ratio: {\n                width: sar_width,\n                height: sar_height\n            },\n\n            codec_size: {\n                width: codec_width,\n                height: codec_height\n            },\n\n            present_size: {\n                width: present_width,\n                height: codec_height\n            }\n        };\n    }\n\n    static _skipScalingList(gb, count) {\n        let last_scale = 8,\n            next_scale = 8;\n        let delta_scale = 0;\n        for (let i = 0; i < count; i++) {\n            if (next_scale !== 0) {\n                delta_scale = gb.readSEG();\n                next_scale = (last_scale + delta_scale + 256) % 256;\n            }\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\n        }\n    }\n\n    static getProfileString(profile_idc) {\n        switch (profile_idc) {\n            case 66:\n                return 'Baseline';\n            case 77:\n                return 'Main';\n            case 88:\n                return 'Extended';\n            case 100:\n                return 'High';\n            case 110:\n                return 'High10';\n            case 122:\n                return 'High422';\n            case 244:\n                return 'High444';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    static getLevelString(level_idc) {\n        return (level_idc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma) {\n        switch (chroma) {\n            case 420:\n                return '4:2:0';\n            case 422:\n                return '4:2:2';\n            case 444:\n                return '4:4:4';\n            default:\n                return 'Unknown';\n        }\n    }\n\n}\n\nexport default SPSParser;\n","/* eslint-disable */\nimport flvDemux from './flvdemux';\nimport mediainfo from './media-info';\nimport SPSParser from './sps-parser';\nclass tagDemux {\n    constructor() {\n        this.TAG = this.constructor.name;\n\n        this._config = {};\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = 0;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = false;\n        this._hasVideo = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new mediainfo();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\n\n        this._littleEndian = (function() {\n            const buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n        })();\n    }\n    onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n    parseMetadata(arr) {\n        const data = flvDemux.parseMetadata(arr);\n        this._parseScriptData(data);\n        console.log(this._mediaInfo, this._mediaInfo.isComplete());\n    }\n    _parseScriptData(obj) {\n        const scriptData = obj;\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (this._metadata) {\n                console.log(this.TAG, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            const onMetaData = this._metadata.onMetaData;\n\n            if (typeof onMetaData.hasAudio === 'boolean') { // hasAudio\n                this._hasAudio = onMetaData.hasAudio;\n                this._mediaInfo.hasAudio = this._hasAudio;\n            }\n            if (typeof onMetaData.hasVideo === 'boolean') { // hasVideo\n                this._hasVideo = onMetaData.hasVideo;\n                this._mediaInfo.hasVideo = this._hasVideo;\n            }\n            if (typeof onMetaData.audiodatarate === 'number') { // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate === 'number') { // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if (typeof onMetaData.width === 'number') { // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height === 'number') { // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if (typeof onMetaData.duration === 'number') { // duration\n                if (!this._durationOverrided) {\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if (typeof onMetaData.framerate === 'number') { // framerate\n                const fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    const fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if (typeof onMetaData.keyframes === 'object') { // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                const keyframes = onMetaData.keyframes;\n                keyframes.times = onMetaData.times;\n                keyframes.filepositions = onMetaData.filepositions;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            console.log(this.TAG, 'Parsed onMetaData');\n            // if (this._mediaInfo.isComplete()) {\n            // this._onMediaInfo(this._mediaInfo);\n            // }\n            return this._mediaInfo;\n        }\n    }\n\n    _parseKeyframesIndex(keyframes) {\n        const times = [];\n        const filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for (let i = 1; i < keyframes.times.length; i++) {\n            const time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return {\n            times,\n            filepositions\n        };\n    }\n\n    /**\n     * 传入tags输出moof和mdat\n     *\n     * @param {any} tags\n     *\n     * @memberof tagDemux\n     */\n    moofTag(tags) {\n\n        for (let i = 0; i < tags.length; i++) {\n            this._dispatch = true;\n            this.parseChunks(tags[i]);\n            // console.log(\"tagTimestamp\", tags[i].getTime(), tags[i]);\n        }\n        if (this._isInitialMetadataDispatched()) {\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        }\n    }\n\n    parseChunks(flvtag) {\n\n        switch (flvtag.tagType) {\n            case 8: // Audio\n                this._parseAudioData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime());\n                break;\n            case 9: // Video\n                this._parseVideoData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime(), 0);\n                break;\n            case 18: // ScriptDataObject\n                this.parseMetadata(flvtag.body);\n                break;\n        }\n    }\n\n    _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n            // this.timestampBase(0);\n        }\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n        // 获取 video tag body 第一字节\n        const spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];\n        // 获取是否是关键帧\n        const frameType = (spec & 240) >>> 4;\n        // 获取编码格式\n        const codecId = spec & 15;\n\n        if (codecId !== 7) {\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, `Flv: Unsupported codec in video frame: ${codecId}`);\n            return;\n        }\n\n        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n    }\n\n    _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n\n        if (dataSize < 4) {\n            console.log(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n            return;\n        }\n\n        const le = this._littleEndian;\n        // 获取 video tag body 第2字节到结尾\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        // IF CodecID == 7  AVCPacketType\n        // 0 = AVC sequence header\n        // 1 = AVC NALU\n        // 2 = AVC end of sequence (lower level NALU sequence ender is not required or supported)\n        const packetType = v.getUint8(0);\n        // 3字节\n        // IF AVCPacketType == 1\n        //  Composition time offset\n        // ELSE\n        //  0\n        const cts = v.getUint32(0, !le) & 0x00FFFFFF;\n\n        // IF AVCPacketType == 0 AVCDecoderConfigurationRecord（AVC sequence header）\n        // IF AVCPacketType == 1 One or more NALUs (Full frames are required)\n\n        /**\n         *AVCDecoderConfigurationRecord.包含着是H.264解码相关比较重要的sps和pps信息，\n         *再给AVC解码器送数据 流之前一定要把sps和pps信息送出，否则的话解码器不能正常解码。\n         *而且在解码器stop之后再次start之前，如seek、快进快退状态切换等，\n         *都 需要重新送一遍sps和pps的信息.AVCDecoderConfigurationRecord在FLV文件中一般情况也是出现1次，\n         *也就是第一个 video tag.\n         */\n        if (packetType === 0) { // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n        } else if (packetType === 1) { // One or more Nalus\n            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n        } else if (packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid video packet type ${packetType}`);\n            return;\n        }\n    }\n\n    /**\n     * AVC 初始化\n     */\n    _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 7) {\n            console.log(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta = this._videoMetadata;\n        const track = this._videoTrack;\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        if (!meta) {\n            meta = this._videoMetadata = {};\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n        } else {\n            if (typeof meta.avcc !== 'undefined') {\n                console.log(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n            }\n        }\n\n        const version = v.getUint8(0); // configurationVersion\n        const avcProfile = v.getUint8(1); // avcProfileIndication\n        const profileCompatibility = v.getUint8(2); // profile_compatibility\n        const avcLevel = v.getUint8(3); // AVCLevelIndication\n\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) { // holy shit!!!\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n        if (spsCount === 0 || spsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 SPS count: ${spsCount}`);\n            return;\n        }\n\n        let offset = 6;\n\n        for (let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset, !le); // sequenceParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n\n            const config = SPSParser.parseSPS(sps);\n            meta.codecWidth = config.codec_size.width;\n            meta.codecHeight = config.codec_size.height;\n            meta.presentWidth = config.present_size.width;\n            meta.presentHeight = config.present_size.height;\n\n            meta.profile = config.profile_string;\n            meta.level = config.level_string;\n            meta.bitDepth = config.bit_depth;\n            meta.chromaFormat = config.chroma_format;\n            meta.sarRatio = config.sar_ratio;\n            meta.frameRate = config.frame_rate;\n\n            if (config.frame_rate.fixed === false ||\n                config.frame_rate.fps_num === 0 ||\n                config.frame_rate.fps_den === 0) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n\n            const fps_den = meta.frameRate.fps_den;\n            const fps_num = meta.frameRate.fps_num;\n            meta.refSampleDuration = Math.floor(meta.timescale * (fps_den / fps_num));\n\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            const mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.chromaFormat = config.chroma_format_string;\n            mi.sarNum = meta.sarRatio.width;\n            mi.sarDen = meta.sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if (mi.hasAudio) {\n                if (mi.audioCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n        }\n\n        const ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n        if (ppsCount === 0 || ppsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 PPS count: ${ppsCount}`);\n            return;\n        }\n\n        offset++;\n\n        for (let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset, !le); // pictureParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(dataSize);\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n        console.log(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n        if (this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        // if (this._onTrackMetadata) {\n        //     this._onTrackMetadata.call(null, meta);\n        // }\n\n        this._onTrackMetadata('video', meta);\n    }\n\n    timestampBase(i) {\n        this._timestampBase = i;\n    }\n\n    /**\n     * 普通的AVC 片段\n     */\n    _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let units = [],\n            length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        const dts = this._timestampBase + tagTimestamp;\n        let keyframe = (frameType === 1); // from FLV Frame Type constants\n\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                console.log(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\n                break; // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le); // Big-Endian read\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                console.log(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            const unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n            if (unitType === 5) { // IDR\n                keyframe = true;\n            }\n\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n            const unit = { type: unitType, data };\n            units.push(unit);\n            length += data.byteLength;\n\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            const track = this._videoTrack;\n            const avcSample = {\n                units,\n                length,\n                isKeyframe: keyframe,\n                dts,\n                cts,\n                pts: (dts + cts)\n            };\n            if (keyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n    _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n            // timestampBase(0);\n        }\n\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n            return;\n        }\n\n        let meta = this._audioMetadata;\n        const track = this._audioTrack;\n\n        if (!meta || !meta.codec) {\n            // initial metadata\n            meta = this._audioMetadata = {};\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n\n            const le = this._littleEndian;\n            const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            const soundSpec = v.getUint8(0);\n\n            const soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 10) { // AAC\n                // TODO: support MP3 audio codec\n                this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            let soundRate = 0;\n            const soundRateIndex = (soundSpec & 12) >>> 2;\n\n            const soundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n            if (soundRateIndex < soundRateTable.length) {\n                soundRate = soundRateTable[soundRateIndex];\n            } else {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            const soundSize = (soundSpec & 2) >>> 1; // unused\n            const soundType = (soundSpec & 1);\n\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = (soundType === 0 ? 1 : 2);\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            meta.codec = 'mp4a.40.5';\n        }\n\n        const aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n        if (aacData == undefined) {\n            return;\n        }\n\n        if (aacData.packetType === 0) { // AAC sequence header (AudioSpecificConfig)\n            if (meta.config) {\n                console.log(this.TAG, 'Found another AudioSpecificConfig!');\n            }\n            const misc = aacData.data;\n            meta.audioSampleRate = misc.samplingRate;\n            meta.channelCount = misc.channelCount;\n            meta.codec = misc.codec;\n            meta.config = misc.config;\n            // The decode result of an aac sample is 1024 PCM samples\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            console.log(this.TAG, 'Parsed AudioSpecificConfig');\n\n            if (this._isInitialMetadataDispatched()) {\n                // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._audioInitialMetadataDispatched = true;\n            }\n            // then notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('audio', meta);\n\n            const mi = this._mediaInfo;\n            mi.audioCodec = 'mp4a.40.' + misc.originalAudioObjectType;\n            mi.audioSampleRate = meta.audioSampleRate;\n            mi.audioChannelCount = meta.channelCount;\n            if (mi.hasVideo) {\n                if (mi.videoCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n            return;\n        } else if (aacData.packetType === 1) { // AAC raw frame data\n            const dts = this._timestampBase + tagTimestamp;\n            const aacSample = { unit: aacData.data, dts, pts: dts };\n            track.samples.push(aacSample);\n            track.length += aacData.data.length;\n        } else {\n            console.log(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n        }\n    }\n\n    _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        const result = {};\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n        result.packetType = array[0];\n\n        if (array[0] === 0) {\n            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n        } else {\n            result.data = array.subarray(1);\n        }\n\n        return result;\n    }\n\n    _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let config = null;\n\n        const mpegSamplingRates = [\n            96000, 88200, 64000, 48000, 44100, 32000,\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\n        ];\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n        // debugger;\n        // 5 bits\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n        if (samplingIndex < 0 || samplingIndex >= mpegSamplingRates.length) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n            return;\n        }\n\n        const samplingFrequence = mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        const channelConfig = (array[1] & 0x78) >>> 3;\n        if (channelConfig < 0 || channelConfig >= 8) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n            return;\n        }\n\n        if (audioObjectType === 5) { // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n        }\n\n        // workarounds for various browsers\n        const userAgent = self.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if (samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else { // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if (userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if (samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if (channelConfig === 1) { // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0] = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\n        config[1] = (samplingIndex & 0x0F) << 7;\n        config[1] |= (channelConfig & 0x0F) << 3;\n        if (audioObjectType === 5) {\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\n            config[2] = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= (2 << 2);\n            config[3] = 0;\n        }\n\n        return {\n            config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: 'mp4a.40.' + audioObjectType,\n            originalAudioObjectType\n        };\n    }\n    _isInitialMetadataDispatched() {\n        if (this._hasAudio && this._hasVideo) { // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if (this._hasAudio && !this._hasVideo) { // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if (!this._hasAudio && this._hasVideo) { // video only\n            return this._videoInitialMetadataDispatched;\n        }\n    }\n}\nexport default new tagDemux();\n\n","import tag from './flvTag.js';\nimport tagDemux from './tagDemux';\nclass FlvParse {\n    constructor() {\n        this.tempUint8 = new Uint8Array();\n        this.arrTag = [];\n        this.index = 0;\n        this.tempArr = [];\n        this.stop = false;\n        this.offset = 0;\n        this.frist = true;\n        this._hasAudio = false;\n        this._hasVideo = false;\n    }\n\n    /**\n     * 接受 外部的flv二进制数据\n     */\n    setFlv(uint8) {\n        this.stop = false;\n        this.arrTag = [];\n        this.index = 0;\n        this.tempUint8 = uint8;\n        if (this.tempUint8.length > 13 && this.tempUint8[0] == 70 && this.tempUint8[1] == 76 && this.tempUint8[2] == 86) {\n            this.probe(this.tempUint8.buffer);\n            this.read(9); // 略掉9个字节的flv header tag\n            this.read(4); // 略掉第一个4字节的 tag size\n            this.parse();\n            this.frist = false;\n            return this.offset;\n        } else if (!this.frist) {\n            return this.parse();\n        } else {\n            return this.offset;\n        }\n    }\n    probe(buffer) {\n        const data = new Uint8Array(buffer);\n        const mismatch = { match: false };\n\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n            return mismatch;\n        }\n\n        const hasAudio = ((data[4] & 4) >>> 2) !== 0;\n        const hasVideo = (data[4] & 1) !== 0;\n\n        if (!hasAudio && !hasVideo) {\n            return mismatch;\n        }\n        this._hasAudio = tagDemux._hasAudio = hasAudio;\n        this._hasVideo = tagDemux._hasVideo = hasVideo;\n        return {\n            match: true,\n            hasAudioTrack: hasAudio,\n            hasVideoTrack: hasVideo\n        };\n    }\n\n    /**\n     * 开始解析\n     */\n    parse() {\n\n        while (this.index < this.tempUint8.length && !this.stop) {\n            this.offset = this.index;\n\n            const t = new tag();\n            if (this.tempUint8.length - this.index >= 11) {\n                t.tagType = (this.read(1)[0]); // 取出tag类型\n                t.dataSize = this.read(3); // 取出包体大小\n                t.Timestamp = this.read(4); // 取出解码时间\n                t.StreamID = this.read(3); // 取出stream id\n            } else {\n                this.stop = true;\n                continue;\n            }\n            if (this.tempUint8.length - this.index >= (this.getBodySum(t.dataSize) + 4)) {\n                t.body = this.read(this.getBodySum(t.dataSize)); // 取出body\n                if (t.tagType == 9 && this._hasVideo) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 8 && this._hasAudio) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 18 ) {\n                    this.arrTag.push(t);\n                }\n                this.read(4);\n            } else {\n                this.stop = true;\n                continue;\n            }\n            this.offset = this.index;\n        }\n\n        return this.offset;\n    }\n    read(length) {\n        // let u8a = new Uint8Array(length);\n        // u8a.set(this.tempUint8.subarray(this.index, this.index + length), 0);\n        const u8a = this.tempUint8.slice(this.index, this.index + length);\n        this.index += length;\n        return u8a;\n    }\n\n    /**\n     * 计算tag包体大小\n     */\n    getBodySum(arr) {\n        let _str = '';\n        _str += (arr[0].toString(16).length == 1 ? '0' + arr[0].toString(16) : arr[0].toString(16));\n        _str += (arr[1].toString(16).length == 1 ? '0' + arr[1].toString(16) : arr[1].toString(16));\n        _str += (arr[2].toString(16).length == 1 ? '0' + arr[2].toString(16) : arr[2].toString(16));\n        return parseInt(_str, 16);\n    }\n}\nexport default new FlvParse();\n","/* eslint-disable */\nimport flvDemux from './flvdemux';\nimport mediainfo from './media-info';\nimport SPSParser from './sps-parser';\nclass tagDemux {\n    constructor() {\n        this.TAG = this.constructor.name;\n\n        this._config = {};\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = 0;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = false;\n        this._hasVideo = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new mediainfo();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\n\n        this._littleEndian = (function() {\n            const buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n        })();\n    }\n    onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n    parseMetadata(arr) {\n        const data = flvDemux.parseMetadata(arr);\n        this._parseScriptData(data);\n        console.log(this._mediaInfo, this._mediaInfo.isComplete());\n    }\n    _parseScriptData(obj) {\n        const scriptData = obj;\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (this._metadata) {\n                console.log(this.TAG, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            const onMetaData = this._metadata.onMetaData;\n\n            if (typeof onMetaData.hasAudio === 'boolean') { // hasAudio\n                this._hasAudio = onMetaData.hasAudio;\n                this._mediaInfo.hasAudio = this._hasAudio;\n            }\n            if (typeof onMetaData.hasVideo === 'boolean') { // hasVideo\n                this._hasVideo = onMetaData.hasVideo;\n                this._mediaInfo.hasVideo = this._hasVideo;\n            }\n            if (typeof onMetaData.audiodatarate === 'number') { // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate === 'number') { // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if (typeof onMetaData.width === 'number') { // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height === 'number') { // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if (typeof onMetaData.duration === 'number') { // duration\n                if (!this._durationOverrided) {\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if (typeof onMetaData.framerate === 'number') { // framerate\n                const fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    const fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if (typeof onMetaData.keyframes === 'object') { // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                const keyframes = onMetaData.keyframes;\n                keyframes.times = onMetaData.times;\n                keyframes.filepositions = onMetaData.filepositions;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            console.log(this.TAG, 'Parsed onMetaData');\n            // if (this._mediaInfo.isComplete()) {\n            // this._onMediaInfo(this._mediaInfo);\n            // }\n            return this._mediaInfo;\n        }\n    }\n\n    _parseKeyframesIndex(keyframes) {\n        const times = [];\n        const filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for (let i = 1; i < keyframes.times.length; i++) {\n            const time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return {\n            times,\n            filepositions\n        };\n    }\n\n    /**\n     * 传入tags输出moof和mdat\n     *\n     * @param {any} tags\n     *\n     * @memberof tagDemux\n     */\n    moofTag(tags) {\n\n        for (let i = 0; i < tags.length; i++) {\n            this._dispatch = true;\n            this.parseChunks(tags[i]);\n            // console.log(\"tagTimestamp\", tags[i].getTime(), tags[i]);\n        }\n        if (this._isInitialMetadataDispatched()) {\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        }\n    }\n\n    parseChunks(flvtag) {\n\n        switch (flvtag.tagType) {\n            case 8: // Audio\n                this._parseAudioData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime());\n                break;\n            case 9: // Video\n                this._parseVideoData(flvtag.body.buffer, 0, flvtag.body.length, flvtag.getTime(), 0);\n                break;\n            case 18: // ScriptDataObject\n                this.parseMetadata(flvtag.body);\n                break;\n        }\n    }\n\n    _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n            // this.timestampBase(0);\n        }\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n        // 获取 video tag body 第一字节\n        const spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];\n        // 获取是否是关键帧\n        const frameType = (spec & 240) >>> 4;\n        // 获取编码格式\n        const codecId = spec & 15;\n\n        if (codecId !== 7) {\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, `Flv: Unsupported codec in video frame: ${codecId}`);\n            return;\n        }\n\n        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n    }\n\n    _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n\n        if (dataSize < 4) {\n            console.log(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n            return;\n        }\n\n        const le = this._littleEndian;\n        // 获取 video tag body 第2字节到结尾\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        // IF CodecID == 7  AVCPacketType\n        // 0 = AVC sequence header\n        // 1 = AVC NALU\n        // 2 = AVC end of sequence (lower level NALU sequence ender is not required or supported)\n        const packetType = v.getUint8(0);\n        // 3字节\n        // IF AVCPacketType == 1\n        //  Composition time offset\n        // ELSE\n        //  0\n        const cts = v.getUint32(0, !le) & 0x00FFFFFF;\n\n        // IF AVCPacketType == 0 AVCDecoderConfigurationRecord（AVC sequence header）\n        // IF AVCPacketType == 1 One or more NALUs (Full frames are required)\n\n        /**\n         *AVCDecoderConfigurationRecord.包含着是H.264解码相关比较重要的sps和pps信息，\n         *再给AVC解码器送数据 流之前一定要把sps和pps信息送出，否则的话解码器不能正常解码。\n         *而且在解码器stop之后再次start之前，如seek、快进快退状态切换等，\n         *都 需要重新送一遍sps和pps的信息.AVCDecoderConfigurationRecord在FLV文件中一般情况也是出现1次，\n         *也就是第一个 video tag.\n         */\n        if (packetType === 0) { // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n        } else if (packetType === 1) { // One or more Nalus\n            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n        } else if (packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid video packet type ${packetType}`);\n            return;\n        }\n    }\n\n    /**\n     * AVC 初始化\n     */\n    _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 7) {\n            console.log(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta = this._videoMetadata;\n        const track = this._videoTrack;\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        if (!meta) {\n            meta = this._videoMetadata = {};\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n        } else {\n            if (typeof meta.avcc !== 'undefined') {\n                console.log(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n            }\n        }\n\n        const version = v.getUint8(0); // configurationVersion\n        const avcProfile = v.getUint8(1); // avcProfileIndication\n        const profileCompatibility = v.getUint8(2); // profile_compatibility\n        const avcLevel = v.getUint8(3); // AVCLevelIndication\n\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) { // holy shit!!!\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n        if (spsCount === 0 || spsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 SPS count: ${spsCount}`);\n            return;\n        }\n\n        let offset = 6;\n\n        for (let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset, !le); // sequenceParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n\n            const config = SPSParser.parseSPS(sps);\n            meta.codecWidth = config.codec_size.width;\n            meta.codecHeight = config.codec_size.height;\n            meta.presentWidth = config.present_size.width;\n            meta.presentHeight = config.present_size.height;\n\n            meta.profile = config.profile_string;\n            meta.level = config.level_string;\n            meta.bitDepth = config.bit_depth;\n            meta.chromaFormat = config.chroma_format;\n            meta.sarRatio = config.sar_ratio;\n            meta.frameRate = config.frame_rate;\n\n            if (config.frame_rate.fixed === false ||\n                config.frame_rate.fps_num === 0 ||\n                config.frame_rate.fps_den === 0) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n\n            const fps_den = meta.frameRate.fps_den;\n            const fps_num = meta.frameRate.fps_num;\n            meta.refSampleDuration = Math.floor(meta.timescale * (fps_den / fps_num));\n\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            const mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.chromaFormat = config.chroma_format_string;\n            mi.sarNum = meta.sarRatio.width;\n            mi.sarDen = meta.sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if (mi.hasAudio) {\n                if (mi.audioCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n        }\n\n        const ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n        if (ppsCount === 0 || ppsCount > 1) {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid H264 PPS count: ${ppsCount}`);\n            return;\n        }\n\n        offset++;\n\n        for (let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset, !le); // pictureParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(dataSize);\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n        console.log(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n        if (this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        // if (this._onTrackMetadata) {\n        //     this._onTrackMetadata.call(null, meta);\n        // }\n\n        this._onTrackMetadata('video', meta);\n    }\n\n    timestampBase(i) {\n        this._timestampBase = i;\n    }\n\n    /**\n     * 普通的AVC 片段\n     */\n    _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let units = [],\n            length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        const dts = this._timestampBase + tagTimestamp;\n        let keyframe = (frameType === 1); // from FLV Frame Type constants\n\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                console.log(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\n                break; // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le); // Big-Endian read\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                console.log(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            const unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n            if (unitType === 5) { // IDR\n                keyframe = true;\n            }\n\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n            const unit = { type: unitType, data };\n            units.push(unit);\n            length += data.byteLength;\n\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            const track = this._videoTrack;\n            const avcSample = {\n                units,\n                length,\n                isKeyframe: keyframe,\n                dts,\n                cts,\n                pts: (dts + cts)\n            };\n            if (keyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n    _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n        if (tagTimestamp == this._timestampBase && this._timestampBase != 0) {\n            console.log(tagTimestamp, this._timestampBase, '夭寿啦这个视频不是从0开始');\n            // timestampBase(0);\n        }\n\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n            return;\n        }\n\n        let meta = this._audioMetadata;\n        const track = this._audioTrack;\n\n        if (!meta || !meta.codec) {\n            // initial metadata\n            meta = this._audioMetadata = {};\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n\n            const le = this._littleEndian;\n            const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            const soundSpec = v.getUint8(0);\n\n            const soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 10) { // AAC\n                // TODO: support MP3 audio codec\n                this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            let soundRate = 0;\n            const soundRateIndex = (soundSpec & 12) >>> 2;\n\n            const soundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n            if (soundRateIndex < soundRateTable.length) {\n                soundRate = soundRateTable[soundRateIndex];\n            } else {\n                this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            const soundSize = (soundSpec & 2) >>> 1; // unused\n            const soundType = (soundSpec & 1);\n\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = (soundType === 0 ? 1 : 2);\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            meta.codec = 'mp4a.40.5';\n        }\n\n        const aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n        if (aacData == undefined) {\n            return;\n        }\n\n        if (aacData.packetType === 0) { // AAC sequence header (AudioSpecificConfig)\n            if (meta.config) {\n                console.log(this.TAG, 'Found another AudioSpecificConfig!');\n            }\n            const misc = aacData.data;\n            meta.audioSampleRate = misc.samplingRate;\n            meta.channelCount = misc.channelCount;\n            meta.codec = misc.codec;\n            meta.config = misc.config;\n            // The decode result of an aac sample is 1024 PCM samples\n            meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n            console.log(this.TAG, 'Parsed AudioSpecificConfig');\n\n            if (this._isInitialMetadataDispatched()) {\n                // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._audioInitialMetadataDispatched = true;\n            }\n            // then notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('audio', meta);\n\n            const mi = this._mediaInfo;\n            mi.audioCodec = 'mp4a.40.' + misc.originalAudioObjectType;\n            mi.audioSampleRate = meta.audioSampleRate;\n            mi.audioChannelCount = meta.channelCount;\n            if (mi.hasVideo) {\n                if (mi.videoCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n            return;\n        } else if (aacData.packetType === 1) { // AAC raw frame data\n            const dts = this._timestampBase + tagTimestamp;\n            const aacSample = { unit: aacData.data, dts, pts: dts };\n            track.samples.push(aacSample);\n            track.length += aacData.data.length;\n        } else {\n            console.log(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n        }\n    }\n\n    _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize <= 1) {\n            console.log(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        const result = {};\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n        result.packetType = array[0];\n\n        if (array[0] === 0) {\n            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n        } else {\n            result.data = array.subarray(1);\n        }\n\n        return result;\n    }\n\n    _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let config = null;\n\n        const mpegSamplingRates = [\n            96000, 88200, 64000, 48000, 44100, 32000,\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\n        ];\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n        // debugger;\n        // 5 bits\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n        if (samplingIndex < 0 || samplingIndex >= mpegSamplingRates.length) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n            return;\n        }\n\n        const samplingFrequence = mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        const channelConfig = (array[1] & 0x78) >>> 3;\n        if (channelConfig < 0 || channelConfig >= 8) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n            return;\n        }\n\n        if (audioObjectType === 5) { // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n        }\n\n        // workarounds for various browsers\n        const userAgent = self.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if (samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else { // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if (userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if (samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if (channelConfig === 1) { // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0] = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\n        config[1] = (samplingIndex & 0x0F) << 7;\n        config[1] |= (channelConfig & 0x0F) << 3;\n        if (audioObjectType === 5) {\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\n            config[2] = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= (2 << 2);\n            config[3] = 0;\n        }\n\n        return {\n            config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: 'mp4a.40.' + audioObjectType,\n            originalAudioObjectType\n        };\n    }\n    _isInitialMetadataDispatched() {\n        if (this._hasAudio && this._hasVideo) { // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if (this._hasAudio && !this._hasVideo) { // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if (!this._hasAudio && this._hasVideo) { // video only\n            return this._videoInitialMetadataDispatched;\n        }\n    }\n}\nexport default new tagDemux();\n\n","/**\n * 代码借鉴了flv.js\n * 增加了自己的注释和写法\n */\n/* eslint-disable */\nclass MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [],\n            avcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            mvex: [],\n            mvhd: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: []\n        };\n\n        for (const name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        const constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\t\tisom\tMP4  Base Media v1 [IS0 14496-12:2003]\tISO\tYES\tvideo/mp4\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags  version字段后会有一个entry count字段\n            0x00, 0x00, 0x00, 0x01 // entry_count\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，根据type不同sample description会提供不同的信息，例如对于video track，会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count     0个索引\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide' 在media box中，该值为4个字符\t\t“vide”— video track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 保留位\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'在media box中，该值为4个字符\t\t“soun”— audio track\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 保留位\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler 长度不定\t\ttrack type name，以‘\\0’结尾的字符串\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count 1个url\n            // url\tbox开始\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags 当“url”或“urn”的box flag为1时，字符串均为空。\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2) 立体声平衡，[8.8] 格式值，一般为0，-1.0表示全部左声道，1.0表示全部右声道+2位保留位\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes 视频合成模式，为0时拷贝原始图像，否则与opcolor进行合成   //理论上是4位啊  暂时保留\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes ｛red，green，blue｝\n            0x00, 0x00\n        ]);\n    }\n\n    /**\n     * 封装box\n     */\n    static box(type) {\n        let size = 8;\n        let result = null;\n        const datas = Array.prototype.slice.call(arguments, 1);\n        const arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n        // box头部大小\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF; // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>> 8) & 0xFF;\n        result[3] = (size) & 0xFF;\n        // 写入box的type\n        result.set(type, 4); // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) { // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // 创建ftyp&moov\n    static generateInitSegment(meta) {\n        if (meta.constructor != Array) {\n            meta = [meta];\n        }\n        const ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        const moov = MP4.moov(meta);\n\n        const result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        const mvhd = MP4.mvhd(meta[0].timescale, meta[0].duration); // /moov里面的第一个box\n        const vtrak = MP4.trak(meta[0]);\n        let atrak;\n        if (meta.length > 1) {\n            atrak = MP4.trak(meta[1]);\n        }\n\n        const mvex = MP4.mvex(meta);\n        if (meta.length > 1) { return MP4.box(MP4.types.moov, mvhd, vtrak, atrak, mvex); } else { return MP4.box(MP4.types.moov, mvhd, vtrak, mvex); }\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time   修改时间\n            (timescale >>> 24) & 0xFF, // timescale: 4 bytes\t\t文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\t该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000, duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\t与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\t保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // 视频变换矩阵   线性代数\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // pre-defined 保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id,\n            duration = meta.duration;\n        let width = meta.presentWidth,\n            height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：\n            // 0x000001 track_enabled，否则该track不被播放；\n            // 0x000002 track_in_movie，表示该track在播放中被引用；\n            // 0x000004 track_in_preview，表示该track在预览时被引用。\n            // 一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0\n            // hint track  这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。\n            0x00, 0x00, 0x00, 0x00, // creation_time\t创建时间（相对于UTC时间1904-01-01零点的秒数）\n            0x00, 0x00, 0x00, 0x00, // modification_time\t修改时间\n            (trackId >>> 24) & 0xFF, // track_ID: 4 bytes\tid号，不能重复且不能为0\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位\n            (duration >>> 24) & 0xFF, // duration: 4 bytes  \ttrack的时间长度\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00, // 视频变换矩阵\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            (width >>> 8) & 0xFF, // //宽度\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF, // 高度\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    /**\n     * “mdia”也是个container box，其子box的结构和种类还是比较复杂的。先来看一个“mdia”的实例结构树图。\n     * 总体来说，“mdia”定义了track媒体类型以及sample数据，描述sample信息。一般“mdia”包含一个“mdhd”，\n     * 一个“hdlr”和一个“minf”，其中“mdhd”为media header box，“hdlr”为handler reference box，\n     * “minf”为media information box。\n     *\n     * mdia\n     * \t\tmdhd\n     * \t\thdlr\n     * \t\tminf\n     * \t\t\tsmhd\n     * \t\t\tdinf\n     * \t\t\t\tdref\n     * \t\t\t\t\turl\n     * \t\t\tstbl\n     * \t\t\t\tstsd\n     * \t\t\t\t\tmp4a\n     * \t\t\t\t\t\tesds\n     * \t\t\t\tstts\n     * \t\t\t\tstsc\n     * \t\t\t\tstsz\n     * \t\t\t\tstco\n     */\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        const timescale = meta.timescale;\n        const duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags // version(0) + flags\t\tbox版本，0或1，一般为0。\n            0x00, 0x00, 0x00, 0x00, // creation_time    创建时间\n            0x00, 0x00, 0x00, 0x00, // modification_time修改时间\n            (timescale >>> 24) & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF, // duration: 4 bytes  track的时间长度\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）\n            0x00, 0x00 // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    /**\n\t\t * “minf”存储了解释track媒体数据的handler-specific信息，media handler用这些信息将媒体时间映射到媒体数据并进行处理。“minf”中的信息格式和内容与媒体类型以及解释媒体数据的media handler密切相关，其他media handler不知道如何解释这些信息。“minf”是一个container box，其实际内容由子box说明。\n    一般情况下，“minf”包含一个header box，一个“dinf”和一个“stbl”，其中，header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”，“dinf”为data information box，“stbl”为sample table box。下面分别介绍。\n\n\t\t *\n\t\t */\n    // Media infomation box\n    static minf(meta) {\n        // header box根据track type（即media handler type）分为“vmhd”、“smhd”、“hmhd”和“nmhd”\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    /**\n     * Data Information Box\n     * “dinf”解释如何定位媒体信息，是一个container box。“dinf”一般包含一个“dref”，即data reference box；\n     * “dref”下会包含若干个“url”或“urn”，这些box组成一个表，用来定位track数据。\n     * 简单的说，track可以被分成若干段，每一段都可以根据“url”或“urn”指向的地址来获取数据，\n     * sample描述中会用这些片段的序号将这些片段组成一个完整的track。\n     * 一般情况下，当数据被完全包含在文件中时，“url”或“urn”中的定位字符串是空的。\n     */\n    static dinf() {\n        const result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    /**\n\t\t * Sample Table Box（stbl）\n    \t*\t“stbl”几乎是普通的MP4文件中最复杂的一个box了，首先需要回忆一下sample的概念。\n \t\t* \tsample是媒体数据存储的单位，存储在media的chunk中，chunk和sample的长度均可互不相同，如下图所示。\n\t\t\t“stbl”是一个container box，其子box包括：sample description box（stsd）、\n\t\t\t * time to sample box（stts）、sample size box（stsz或stz2）、\n\t\t\t * sample to chunk box（stsc）、chunk offset box（stco或co64）、\n\t\t\t * composition time to sample box（ctts）、sync sample box（stss）\n\t\t\t * stsd”必不可少，且至少包含一个条目，该box包含了data reference box进行sample数据检索的信息。\n\t\t\t * 没有“stsd”就无法计算media sample的存储位置。“stsd”包含了编码的信息，其存储的信息随媒体类型不同而不同。\n\t\t\t * \t\t\tstbl\n\t\t\t * \t\t\t\tstsd\n\t\t\t * \t\t\t\t\tavc1\n\t\t\t * \t\t\t\t\t\tavcC\n\t\t\t * \t\t\t\tstts\n\t\t\t * \t\t\t\tstsc\n\t\t\t * \t\t\t\tstsz\n\t\t\t * \t\t\t\tstco\n\t\t */\n    static stbl(meta) {\n        const result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample    因为stts的entry count 为0\n            // 所以没有关键帧index 的stss\n            // 也没有CTTS box CTTS是记录偏移量\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n        );\n        return result;\n    }\n\n    /**\n\t\t * Sample Description Box（stsd）\n    \t\tbox header和version字段后会有一个entry count字段，\n * \t\t\t根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，\n * \t\t根据type不同sample description会提供不同的信息，例如对于video track，\n * 会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。\n\n\t\t * * \t\t\t\tstsd\n\t\t\t* \t\t\t\t\tmp4a\n\t\t\t* \t\t\t\t\t\tesds\n\t\t\t *\n\t\t\t *\n\t\t\t *\n\t\t\t *\n\t\t\t * \t\t 4 bytes - length in total\n\t\t\t\t\t 4 bytes - 4 char code of sample description table (stsd)\n\t\t\t\t\t 4 bytes - version & flags\n\t\t\t\t\t 4 bytes - number of sample entries (num_sample_entries)\n\t\t\t\t\t\t [\n\t\t\t\t\t\t    4 bytes - length of sample entry (len_sample_entry)\n\t\t\t\t\t\t    4 bytes - 4 char code of sample entry\n\t\t\t\t\t\t    ('len_sample_entry' - 8) bytes of data\n\t\t\t\t\t\t ] (repeated 'num_sample_entries' times)\n\t\t\t\t\t(4 bytes - optional 0x00000000 as end of box marker )\n\t\t */\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp4a(meta) {\n        const channelCount = meta.channelCount;\n        const sampleRate = meta.audioSampleRate;\n\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // reserved(4) 6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes 保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount, // channelCount(2) 单声道还是双声道\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4) 4字节保留位\n            (sampleRate >>> 8) & 0xFF, // Audio sample rate 显然要右移16位才有意义\ttemplate unsigned int(32) samplerate = {timescale of media}<<16;\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        const config = meta.config;\n        const configSize = config.length;\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type    MP4ESDescrTag\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type    MP4DecConfigDescrTag\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            /**\n             *当objectTypeIndication为0x40时，为MPEG-4 Audio（MPEG-4 Audio generally is thought of as AAC\n             * but there is a whole framework of audio codecs that can Go in MPEG-4 Audio including AAC, BSAC, ALS, CELP,\n             * and something called MP3On4），如果想更细分format为aac还是mp3，\n             * 可以读取MP4DecSpecificDescr层data[0]的前五位\n             */\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type MP4DecSpecificDescrTag\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02 // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    /**\n     * 改版\n     *stsd下的avc1视频解析\n     */\n    static avc1(meta) {\n        const avcc = meta.avcc;\n        let width = meta.codecWidth,\n            height = meta.codecHeight;\n\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // // reserved(4)    6个 保留位\tReserved：6个字节，设置为0；\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + {{{{data_reference_index(2)  数据引用索引}}}}\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes  3*4个字节的保留位\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF, // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF, // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes 常数\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes 常数\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes 保留位\n            0x00, 0x01, // frame_count\n            // frame_count表明多少帧压缩视频存储在每个样本。默认是1,每样一帧;它可能超过1每个样本的多个帧数\n            0x04, //\tstrlen compressorname: 32 bytes\t\t\tString[32]\n            // 32个8 bit    第一个8bit表示长度,剩下31个8bit表示内容\n            0x67, 0x31, 0x31, 0x31, // compressorname: 32 bytes    翻译过来是g111\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00, //\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18, // depth 颜色深度\n            0xFF, 0xFF // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        if (meta.length > 1) { return MP4.box(MP4.types.mvex, MP4.trex(meta[0]), MP4.trex(meta[1])); } else { return MP4.box(MP4.types.mvex, MP4.trex(meta[0])); }\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        const trackId = meta.id;\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n        ]);\n        // if (meta.type !== 'video') {\n        //     data[data.length - 1] = 0x00;\n        // }\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        const data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF, // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>> 8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        const trackId = track.id;\n\n        // Track fragment header box\n        const tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        const tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF, // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>> 8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        const sdtp = MP4.sdtp(track);\n        const trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            const flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6) // is_leading: 2 (bit)\n                |\n                (flags.dependsOn << 4) // sample_depends_on\n                |\n                (flags.isDependedOn << 2) // sample_is_depended_on\n                |\n                (flags.hasRedundancy); // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const dataSize = 12 + 16 * sampleCount;\n        const data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>> 8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF, // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>> 8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n\n            const duration = samples[i].duration;\n\n            const size = samples[i].size;\n            const flags = samples[i].flags;\n            const cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF, // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>> 8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF, // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>> 8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn, // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00, // sample_degradation_priority\n                (cts >>> 24) & 0xFF, // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>> 8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\nexport default MP4;\n\n\n// WEBPACK FOOTER //\n// ./js/mp4/mp4remux.js","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable */\nclass AAC {\n\n    static getSilentFrame(channelCount) {\n        if (channelCount === 1) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n            return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n        } else if (channelCount === 3) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n        } else if (channelCount === 4) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n        } else if (channelCount === 5) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n        } else if (channelCount === 6) {\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n        }\n        return null;\n    }\n\n}\n\nexport default AAC;\n\n\n// WEBPACK FOOTER //\n// ./js/mp4/aac-silent.js","\nconst Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    const ua = self.navigator.userAgent.toLowerCase();\n\n    const match = /(edge)\\/([\\w.]+)/.exec(ua) ||\n        /(opr)[\\/]([\\w.]+)/.exec(ua) ||\n        /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(iemobile)[\\/]([\\w.]+)/.exec(ua) ||\n        /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(msie) ([\\w.]+)/.exec(ua) ||\n        ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\n        ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n\n    const platform_match = /(ipad)/.exec(ua) ||\n        /(ipod)/.exec(ua) ||\n        /(windows phone)/.exec(ua) ||\n        /(iphone)/.exec(ua) ||\n        /(kindle)/.exec(ua) ||\n        /(android)/.exec(ua) ||\n        /(windows)/.exec(ua) ||\n        /(mac)/.exec(ua) ||\n        /(linux)/.exec(ua) ||\n        /(cros)/.exec(ua) || [];\n\n    const matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    const browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        const versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        const msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        const msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        const opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        const android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (const key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexport default Browser;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable */\n// Represents an media sample (audio / video)\nexport class SampleInfo {\n\n    constructor(dts, pts, duration, originalDts, isSync) {\n        this.dts = dts;\n        this.pts = pts;\n        this.duration = duration;\n        this.originalDts = originalDts;\n        this.isSyncPoint = isSync;\n        this.fileposition = null;\n    }\n\n}\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\nexport class MediaSegmentInfo {\n\n    constructor() {\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    appendSyncPoint(sampleInfo) { // also called Random Access Point\n        sampleInfo.isSyncPoint = true;\n        this.syncPoints.push(sampleInfo);\n    }\n\n}\n\n// Ordered list for recording video IDR frames, sorted by originalDts\nexport class IDRSampleList {\n\n    constructor() {\n        this._list = [];\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    appendArray(syncPoints) {\n        const list = this._list;\n\n        if (syncPoints.length === 0) {\n            return;\n        }\n\n        if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n            this.clear();\n        }\n\n        Array.prototype.push.apply(list, syncPoints);\n    }\n\n    getLastSyncPointBeforeDts(dts) {\n        if (this._list.length == 0) {\n            return null;\n        }\n\n        const list = this._list;\n        let idx = 0;\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (dts < list[0].dts) {\n            idx = 0;\n            lbound = ubound + 1;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n                idx = mid;\n                break;\n            } else if (list[mid].dts < dts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return this._list[idx];\n    }\n\n}\n\n// Data structure for recording information of media segments in single track.\nexport class MediaSegmentInfoList {\n\n    constructor(type) {\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get length() {\n        return this._list.length;\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    clear() {\n        this._list = [];\n        this._lastAppendLocation = -1;\n    }\n\n    _searchNearestSegmentBefore(originalBeginDts) {\n        const list = this._list;\n        if (list.length === 0) {\n            return -2;\n        }\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        let idx = 0;\n\n        if (originalBeginDts < list[0].originalBeginDts) {\n            idx = -1;\n            return idx;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&\n                    (originalBeginDts < list[mid + 1].originalBeginDts))) {\n                idx = mid;\n                break;\n            } else if (list[mid].originalBeginDts < originalBeginDts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return idx;\n    }\n\n    _searchNearestSegmentAfter(originalBeginDts) {\n        return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n    }\n\n    append(mediaSegmentInfo) {\n        const list = this._list;\n        const msi = mediaSegmentInfo;\n        const lastAppendIdx = this._lastAppendLocation;\n        let insertIdx = 0;\n\n        if (lastAppendIdx !== -1 && lastAppendIdx < list.length &&\n            msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&\n            ((lastAppendIdx === list.length - 1) ||\n                (lastAppendIdx < list.length - 1 &&\n                    msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {\n            insertIdx = lastAppendIdx + 1; // use cached location idx\n        } else {\n            if (list.length > 0) {\n                insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n            }\n        }\n\n        this._lastAppendLocation = insertIdx;\n        this._list.splice(insertIdx, 0, msi);\n    }\n\n    getLastSegmentBefore(originalBeginDts) {\n        const idx = this._searchNearestSegmentBefore(originalBeginDts);\n        if (idx >= 0) {\n            return this._list[idx];\n        } else { // -1\n            return null;\n        }\n    }\n\n    getLastSampleBefore(originalBeginDts) {\n        const segment = this.getLastSegmentBefore(originalBeginDts);\n        if (segment != null) {\n            return segment.lastSample;\n        } else {\n            return null;\n        }\n    }\n\n    getLastSyncPointBefore(originalBeginDts) {\n        let segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n        let syncPoints = this._list[segmentIdx].syncPoints;\n        while (syncPoints.length === 0 && segmentIdx > 0) {\n            segmentIdx--;\n            syncPoints = this._list[segmentIdx].syncPoints;\n        }\n        if (syncPoints.length > 0) {\n            return syncPoints[syncPoints.length - 1];\n        } else {\n            return null;\n        }\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./js/mp4/media-segment-info.js","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable */\nimport AAC from './aac-silent.js';\nimport Browser from '../utils/browser.js';\nimport MP4 from './mp4remux';\nimport { SampleInfo, MediaSegmentInfo, MediaSegmentInfoList } from './media-segment-info.js';\n\n// Fragmented mp4 remuxer\nclass MP4Remuxer {\n\n    constructor(config) {\n        this.TAG = this.constructor.name;\n\n        this._config = config;\n        this._isLive = (config.isLive === true);\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = !!((Browser.chrome &&\n            (Browser.version.major < 50 ||\n                (Browser.version.major === 50 && Browser.version.build < 2661))));\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = (Browser.msedge || Browser.msie);\n    }\n\n    destroy() {\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioMeta = null;\n        this._videoMeta = null;\n        this._audioSegmentInfoList.clear();\n        this._audioSegmentInfoList = null;\n        this._videoSegmentInfoList.clear();\n        this._videoSegmentInfoList = null;\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n    }\n\n    bindDataSource(producer) {\n        producer.onDataAvailable = this.remux.bind(this);\n        producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n        return this;\n    }\n\n    /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\n       InitSegment: {\n           type: string,\n           data: ArrayBuffer,\n           codec: string,\n           container: string\n       }\n    */\n    get onInitSegment() {\n        return this._onInitSegment;\n    }\n\n    set onInitSegment(callback) {\n        this._onInitSegment = callback;\n    }\n\n    /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\n       MediaSegment: {\n           type: string,\n           data: ArrayBuffer,\n           sampleCount: int32\n           info: MediaSegmentInfo\n       }\n    */\n    get onMediaSegment() {\n        return this._onMediaSegment;\n    }\n\n    set onMediaSegment(callback) {\n        this._onMediaSegment = callback;\n    }\n\n    insertDiscontinuity() {\n        this._audioNextDts = this._videoNextDts = undefined;\n    }\n\n    seek(originalDts) {\n        this._videoSegmentInfoList.clear();\n        this._audioSegmentInfoList.clear();\n    }\n\n    remux(audioTrack, videoTrack) {\n        if (!this._onMediaSegment) {\n            throw new IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n        }\n        if (!this._dtsBaseInited) {\n            this._calculateDtsBase(audioTrack, videoTrack);\n        }\n        this._remuxVideo(videoTrack);\n        this._remuxAudio(audioTrack);\n    }\n\n    _onTrackMetadataReceived(type, metadata) {\n        let metabox = null;\n\n        if (type === 'audio') {\n            this._audioMeta = metadata;\n            metabox = MP4.generateInitSegment(metadata);\n            Log.v('msg+audio', metadata);\n        } else if (type === 'video') {\n            this._videoMeta = metadata;\n            metabox = MP4.generateInitSegment(metadata);\n            Log.v('msg+video', metadata);\n        } else {\n            return;\n        }\n\n        // dispatch metabox (Initialization Segment)\n        if (!this._onInitSegment) {\n            throw new IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n        }\n        this._onInitSegment(type, {\n            type,\n            data: metabox.buffer,\n            codec: metadata.codec,\n            container: `${type}/mp4`\n        });\n    }\n\n    _calculateDtsBase(audioTrack, videoTrack) {\n        if (this._dtsBaseInited) {\n            return;\n        }\n\n        if (audioTrack.samples && audioTrack.samples.length) {\n            this._audioDtsBase = audioTrack.samples[0].dts;\n        }\n        if (videoTrack.samples && videoTrack.samples.length) {\n            this._videoDtsBase = videoTrack.samples[0].dts;\n        }\n\n        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n        this._dtsBaseInited = true;\n    }\n\n    _remuxAudio(audioTrack) {\n        const track = audioTrack;\n        const samples = track.samples;\n        let dtsCorrection;\n        let firstDts = -1,\n            lastDts = -1,\n            lastPts = -1;\n\n        let remuxSilentFrame = false;\n        let silentFrameDuration = -1;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n\n        let bytes = 8 + track.length;\n        let mdatbox = new Uint8Array(bytes);\n        mdatbox[0] = (bytes >>> 24) & 0xFF;\n        mdatbox[1] = (bytes >>> 16) & 0xFF;\n        mdatbox[2] = (bytes >>> 8) & 0xFF;\n        mdatbox[3] = (bytes) & 0xFF;\n\n        mdatbox.set(MP4.types.mdat, 4);\n\n        let offset = 8; // size + type\n        const mp4Samples = [];\n\n        while (samples.length) {\n            const aacSample = samples.shift();\n            const unit = aacSample.unit;\n            const originalDts = aacSample.dts - this._dtsBase;\n\n            if (dtsCorrection == undefined) {\n                if (this._audioNextDts == undefined) {\n                    if (this._audioSegmentInfoList.isEmpty()) {\n                        dtsCorrection = 0;\n                        if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                            remuxSilentFrame = true;\n                        }\n                    } else {\n                        const lastSample = this._audioSegmentInfoList.getLastSampleBefore(originalDts);\n                        if (lastSample != null) {\n                            let distance = (originalDts - (lastSample.originalDts + lastSample.duration));\n                            if (distance <= 3) {\n                                distance = 0;\n                            }\n                            const expectedDts = lastSample.dts + lastSample.duration + distance;\n                            dtsCorrection = originalDts - expectedDts;\n                        } else { // lastSample == null\n                            dtsCorrection = 0;\n                        }\n                    }\n                } else {\n                    dtsCorrection = originalDts - this._audioNextDts;\n                }\n            }\n\n            let dts = originalDts - dtsCorrection;\n            if (remuxSilentFrame) {\n                // align audio segment beginDts to match with current video segment's beginDts\n                const videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(originalDts);\n                if (videoSegment != null && videoSegment.beginDts < dts) {\n                    silentFrameDuration = dts - videoSegment.beginDts;\n                    dts = videoSegment.beginDts;\n                } else {\n                    remuxSilentFrame = false;\n                }\n            }\n            if (firstDts === -1) {\n                firstDts = dts;\n            }\n\n            if (remuxSilentFrame) {\n                remuxSilentFrame = false;\n                samples.unshift(aacSample);\n\n                const frame = this._generateSilentAudio(dts, silentFrameDuration);\n                if (frame == null) {\n                    continue;\n                }\n                const mp4Sample = frame.mp4Sample;\n                const unit = frame.unit;\n\n                mp4Samples.push(mp4Sample);\n\n                // re-allocate mdatbox buffer with new size, to fit with this silent frame\n                bytes += unit.byteLength;\n                mdatbox = new Uint8Array(bytes);\n                mdatbox[0] = (bytes >>> 24) & 0xFF;\n                mdatbox[1] = (bytes >>> 16) & 0xFF;\n                mdatbox[2] = (bytes >>> 8) & 0xFF;\n                mdatbox[3] = (bytes) & 0xFF;\n                mdatbox.set(MP4.types.mdat, 4);\n\n                // fill data now\n                mdatbox.set(unit, offset);\n                offset += unit.byteLength;\n                continue;\n            }\n\n            let sampleDuration = 0;\n\n            if (samples.length >= 1) {\n                const nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {\n                if (mp4Samples.length >= 1) { // use second last sample duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else { // the only one sample, use reference sample duration\n                    sampleDuration = this._audioMeta.refSampleDuration;\n                }\n            }\n\n            const mp4Sample = {\n                dts,\n                pts: dts,\n                cts: 0,\n                size: unit.byteLength,\n                duration: sampleDuration,\n                originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            };\n            mp4Samples.push(mp4Sample);\n            mdatbox.set(unit, offset);\n            offset += unit.byteLength;\n        }\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        this._audioNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        const info = new MediaSegmentInfo();\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstDts;\n        info.endPts = lastDts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            false);\n        info.lastSample = new SampleInfo(latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            false);\n        if (!this._isLive) {\n            this._audioSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber += track.addcoefficient;\n\n        const moofbox = MP4.moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n\n        this._onMediaSegment('audio', {\n            type: 'audio',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info\n        });\n    }\n\n    _generateSilentAudio(dts, frameDuration) {\n        Log.v(this.TAG, `GenerateSilentAudio: dts = ${dts}, duration = ${frameDuration}`);\n\n        const unit = AAC.getSilentFrame(this._audioMeta.channelCount);\n        if (unit == null) {\n            Log.w(this.TAG, `Cannot generate silent aac frame for channelCount = ${this._audioMeta.channelCount}`);\n            return null;\n        }\n\n        const mp4Sample = {\n            dts,\n            pts: dts,\n            cts: 0,\n            size: unit.byteLength,\n            duration: frameDuration,\n            originalDts: dts,\n            flags: {\n                isLeading: 0,\n                dependsOn: 1,\n                isDependedOn: 0,\n                hasRedundancy: 0\n            }\n        };\n\n        return {\n            unit,\n            mp4Sample\n        };\n    }\n\n    _remuxVideo(videoTrack) {\n        const track = videoTrack;\n        const samples = track.samples;\n        let dtsCorrection;\n        let firstDts = -1,\n            lastDts = -1;\n        let firstPts = -1,\n            lastPts = -1;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n\n        const bytes = 8 + videoTrack.length;\n        const mdatbox = new Uint8Array(bytes);\n        mdatbox[0] = (bytes >>> 24) & 0xFF;\n        mdatbox[1] = (bytes >>> 16) & 0xFF;\n        mdatbox[2] = (bytes >>> 8) & 0xFF;\n        mdatbox[3] = (bytes) & 0xFF;\n        mdatbox.set(MP4.types.mdat, 4);\n\n        let offset = 8;\n        const mp4Samples = [];\n        const info = new MediaSegmentInfo();\n\n        while (samples.length) {\n            const avcSample = samples.shift();\n            const keyframe = avcSample.isKeyframe;\n            const originalDts = avcSample.dts - this._dtsBase;\n\n            if (dtsCorrection == undefined) {\n                if (this._videoNextDts == undefined) {\n                    if (this._videoSegmentInfoList.isEmpty()) {\n                        dtsCorrection = 0;\n                    } else {\n                        const lastSample = this._videoSegmentInfoList.getLastSampleBefore(originalDts);\n                        if (lastSample != null) {\n                            let distance = (originalDts - (lastSample.originalDts + lastSample.duration));\n                            if (distance <= 3) {\n                                distance = 0;\n                            }\n                            const expectedDts = lastSample.dts + lastSample.duration + distance;\n                            dtsCorrection = originalDts - expectedDts;\n                        } else { // lastSample == null\n                            dtsCorrection = 0;\n                        }\n                    }\n                } else {\n                    dtsCorrection = originalDts - this._videoNextDts;\n                }\n            }\n\n            const dts = originalDts - dtsCorrection;\n            const cts = avcSample.cts;\n            const pts = dts + cts;\n\n            if (firstDts === -1) {\n                firstDts = dts;\n                firstPts = pts;\n            }\n\n            // fill mdat box\n            let sampleSize = 0;\n            while (avcSample.units.length) {\n                const unit = avcSample.units.shift();\n                const data = unit.data;\n                mdatbox.set(data, offset);\n                offset += data.byteLength;\n                sampleSize += data.byteLength;\n            }\n\n            let sampleDuration = 0;\n\n            if (samples.length >= 1) {\n                const nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {\n                if (mp4Samples.length >= 1) { // lastest sample, use second last duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else { // the only one sample, use reference duration\n                    sampleDuration = this._videoMeta.refSampleDuration;\n                }\n            }\n\n            if (keyframe) {\n                const syncPoint = new SampleInfo(dts, pts, sampleDuration, avcSample.dts, true);\n                syncPoint.fileposition = avcSample.fileposition;\n                info.appendSyncPoint(syncPoint);\n            }\n\n            const mp4Sample = {\n                dts,\n                pts,\n                cts,\n                size: sampleSize,\n                isKeyframe: keyframe,\n                duration: sampleDuration,\n                originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: keyframe ? 2 : 1,\n                    isDependedOn: keyframe ? 1 : 0,\n                    hasRedundancy: 0,\n                    isNonSync: keyframe ? 0 : 1\n                }\n            };\n\n            mp4Samples.push(mp4Sample);\n        }\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        lastPts = latest.pts + latest.duration;\n        this._videoNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstPts;\n        info.endPts = lastPts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            mp4Samples[0].isKeyframe);\n        info.lastSample = new SampleInfo(latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            latest.isKeyframe);\n        if (!this._isLive) {\n            this._videoSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber += track.addcoefficient;\n\n        // workaround for chrome < 50: force first sample as a random access point\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        if (this._forceFirstIDR) {\n            const flags = mp4Samples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n\n        const moofbox = MP4.moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n\n        this._onMediaSegment('video', {\n            type: 'video',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info\n        });\n    }\n\n    _mergeBoxes(moof, mdat) {\n        const result = new Uint8Array(moof.byteLength + mdat.byteLength);\n        result.set(moof, 0);\n        result.set(mdat, moof.byteLength);\n        return result;\n    }\n\n}\n\nexport default MP4Remuxer;\n\n\n// WEBPACK FOOTER //\n// ./js/mp4/mp4moof.js","/* eslint-disable */\nimport flvparse from './flv/flvParse';\nimport tagdemux from './flv/tagdemux';\nimport mp4remux from './mp4/mp4remux';\nimport mp4moof from './mp4/mp4moof';\nclass flv2fmp4 {\n\n    /**\n     * Creates an instance of flv2fmp4.\n     * config 里面有_isLive属性,是否是直播\n     * @param {any} config\n     *\n     * @memberof flv2fmp4\n     */\n    constructor(config) {\n        this._config = { _isLive: false };\n        this._config = Object.assign(this._config, config);\n\n        // 外部方法赋值\n        this.onInitSegment = null;\n        this.onMediaSegment = null;\n        this.onMediaInfo = null;\n        this.seekCallBack = null;\n\n        // 内部使用\n        this.loadmetadata = false;\n        this.ftyp_moov = null;\n        this.metaSuccRun = false;\n        this.metas = [];\n        this.parseChunk = null;\n        this.hasVideo = false;\n        this.hasAudio = false;\n        // 临时记录seek时间\n        this._pendingResolveSeekPoint = -1;\n\n        // 临时记录flv数据起始时间\n        this._tempBaseTime = 0;\n\n        // 处理flv数据入口\n        this.setflvBase = this.setflvBasefrist;\n\n        tagdemux._onTrackMetadata = this.Metadata.bind(this);\n        tagdemux._onMediaInfo = this.metaSucc.bind(this);\n        tagdemux._onDataAvailable = this.onDataAvailable.bind(this);\n        this.m4mof = new mp4moof(this._config);\n        this.m4mof.onMediaSegment = this.onMdiaSegment.bind(this);\n    }\n    seek(baseTime) {\n        this.setflvBase = this.setflvBasefrist;\n        if (baseTime == undefined || baseTime == 0) {\n            baseTime = 0;\n            this._pendingResolveSeekPoint = -1;\n        }\n        if (this._tempBaseTime != baseTime) {\n            this._tempBaseTime = baseTime;\n            tagdemux._timestampBase = baseTime;\n            this.m4mof.seek(baseTime);\n            this.m4mof.insertDiscontinuity();\n            this._pendingResolveSeekPoint = baseTime;\n        }\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * 第一次接受数据,和seek时候接受数据入口,\n     *\n     * @param {any} arraybuff\n     * @param {any} baseTime\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvBasefrist(arraybuff, baseTime) {\n\n        let offset = flvparse.setFlv(new Uint8Array(arraybuff));\n\n        if (flvparse.arrTag.length > 0) {\n            this.hasAudio = flvparse._hasAudio;\n            this.hasVideo = flvparse._hasVideo;\n            if (this._tempBaseTime != 0 && this._tempBaseTime == flvparse.arrTag[0].getTime()) {\n                tagdemux._timestampBase = 0;\n            }\n            tagdemux.moofTag(flvparse.arrTag);\n            this.setflvBase = this.setflvBaseUsually;\n        }\n\n        return offset;\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * 后续接受数据接口\n     * @param {any} arraybuff\n     * @param {any} baseTime\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvBaseUsually(arraybuff, baseTime) {\n        const offset = flvparse.setFlv(new Uint8Array(arraybuff));\n\n        if (flvparse.arrTag.length > 0) {\n            tagdemux.moofTag(flvparse.arrTag);\n        }\n\n        return offset;\n    }\n\n    /**\n     * 不要主动调用这个接口!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     * moof回调\n     *\n     * @param {any} track\n     * @param {any} value\n     *\n     * @memberof flv2fmp4\n     */\n    onMdiaSegment(track, value) {\n\n        if (this.onMediaSegment) {\n            this.onMediaSegment(new Uint8Array(value.data));\n        }\n        if (this._pendingResolveSeekPoint != -1 && track == 'video') {\n            let seekpoint = this._pendingResolveSeekPoint;\n            this._pendingResolveSeekPoint = -1;\n            if (this.seekCallBack) {\n                this.seekCallBack(seekpoint);\n            }\n        }\n    }\n\n    /**\n     *\n     * 音频和视频的初始化tag\n     *\n     * @param {any} type\n     * @param {any} meta\n     *\n     * @memberof flv2fmp4\n     */\n    Metadata(type, meta) {\n        switch (type) {\n            case 'video':\n                this.metas.push(meta);\n                this.m4mof._videoMeta = meta;\n                if (this.hasVideo && !this.hasAudio) {\n                    this.metaSucc();\n                    return;\n                }\n                break;\n            case 'audio':\n                this.metas.push(meta);\n                this.m4mof._audioMeta = meta;\n                if (!this.hasVideo && this.hasAudio) {\n                    this.metaSucc();\n                    return;\n                }\n                break;\n        }\n        if (this.hasVideo && this.hasAudio && this.metaSuccRun && this.metas.length > 1) {\n            this.metaSucc();\n        }\n    }\n\n    /**\n     * metadata解读成功后触发及第一个视频tag和第一个音频tag\n     *\n     * @param {any} mi\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    metaSucc(mi) {\n        if (this.onMediaInfo) {\n            this.onMediaInfo(mi, { hasAudio: this.hasAudio, hasVideo: this.hasVideo });\n        }\n        // 获取ftyp和moov\n        if (this.metas.length == 0) {\n            this.metaSuccRun = true;\n            return;\n        }\n\n        this.ftyp_moov = mp4remux.generateInitSegment(this.metas);\n        if (this.onInitSegment && this.loadmetadata == false) {\n\n            this.onInitSegment(this.ftyp_moov);\n            this.loadmetadata = true;\n        }\n    }\n\n    onDataAvailable(audiotrack, videotrack) {\n        this.m4mof.remux(audiotrack, videotrack);\n    }\n\n    /**\n     * 传入flv的二进制数据\n     * 统一入口\n     * @param {any} arraybuff\n     * @param {any} baseTime flv数据开始时间\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflv(arraybuff, baseTime) {\n        return this.setflvBase(arraybuff, baseTime);\n    }\n\n    /**\n     *\n     * 本地调试代码,不用理会\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvloc(arraybuff) {\n        const offset = flvparse.setFlv(new Uint8Array(arraybuff));\n\n        if (flvparse.arrTag.length > 0) {\n            return flvparse.arrTag;\n        }\n    }\n}\n\n/**\n * 封装的对外类,有些方法不想对外暴露,所以封装这么一个类\n *\n * @class foreign\n */\nclass foreign {\n    constructor(config) {\n\n        this.f2m = new flv2fmp4(config);\n        // 外部方法赋值\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n        this._onMediaInfo = null;\n        this._seekCallBack = null;\n    }\n\n    /**\n     *\n     * 跳转\n     * @param {any} basetime  跳转时间\n     *\n     * @memberof foreign\n     */\n    seek(basetime) {\n        this.f2m.seek(basetime);\n    }\n\n    /**\n     * 传入flv的二进制数据\n     * 统一入口\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflv(arraybuff) {\n        return this.f2m.setflv(arraybuff, 0);\n    }\n\n    /**\n     *\n     * 本地调试代码,不用理会\n     * @param {any} arraybuff\n     * @returns\n     *\n     * @memberof flv2fmp4\n     */\n    setflvloc(arraybuff) {\n        return this.f2m.setflvloc(arraybuff);\n    }\n\n    /**\n     * 赋值初始化seg接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onInitSegment(fun) {\n        this._onInitSegment = fun;\n        this.f2m.onInitSegment = fun;\n    }\n\n    /**\n     * 赋值moof接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onMediaSegment(fun) {\n        this._onMediaSegment = fun;\n        this.f2m.onMediaSegment = fun;\n    }\n\n    /**\n     * 赋值metadata接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set onMediaInfo(fun) {\n        this._onMediaInfo = fun;\n        this.f2m.onMediaInfo = fun;\n    }\n\n    /**\n     * 赋值是否跳转回调接受方法\n     *\n     *\n     * @memberof foreign\n     */\n    set seekCallBack(fun) {\n        this._seekCallBack = fun;\n        this.f2m.seekCallBack = fun;\n    }\n}\n\nexport default foreign;\n\n\n// WEBPACK FOOTER //\n// ./js/flv2fmp4.js","/* eslint-disable */\nimport f2m from './flv2fmp4';\n\nconst temp = new f2m();\n\nwindow.flvParse = {\n    mp4File: null,\n    succ: null,\n    tracks: [],\n    baseTime: 0,\n    setFlv(uint8, baseTime) {\n        if (flvParse.baseTime != baseTime) {\n            flvParse.baseTime = baseTime;\n            temp.seek(baseTime);\n        }\n        if (window.mp4Init) {\n            temp.onInitSegment = window.mp4Init;\n        }\n        if (window.onMediaSegment) {\n            temp.onMediaSegment = window.onMediaSegment;\n        }\n        if (window.seekCallBack) {\n            // temp.seekCallBack = window.se\n            temp.seekCallBack = window.seekCallBack;\n        }\n        if (window.onMediaInfo) {\n            temp.onMediaInfo = window.onMediaInfo;\n        }\n        return temp.setflv(uint8.buffer, baseTime);\n\n        // 用来获取moov\n\n    },\n    setLocFlv(uin8) {\n        return temp.setflvloc(uin8);\n    }\n};\n"],"names":["require$$0","FlvTag","_classCallCheck","tagType","dataSize","Timestamp","StreamID","body","time","arr","_createClass","key","value","getTime","i","length","push","toString","pop","join","parseInt","decodeUTF8","uint8array","out","input","String","fromCharCode","checkContinuation","ucs4","start","checkLength","array","le","buf","ArrayBuffer","DataView","setInt16","Int16Array","flvDemux","parseObject","arrayBuffer","dataOffset","name","parseString","parseScript","size","isObjectEnd","objectEnd","data","parseVariable","parseLongString","v","getUint32","str","Uint8Array","parseDate","timestamp","getFloat64","localTimeOffset","getInt16","Date","getUint16","parseMetadata","offset","uint8","buffer","dv","type","getUint8","b","amfstr","terminal","amfobj","marker","amfvar","undefined","strictArrayLength","val","date","amfLongStr","console","log","MediaInfo","mimeType","duration","hasAudio","hasVideo","audioCodec","videoCodec","audioDataRate","videoDataRate","audioSampleRate","audioChannelCount","width","height","fps","profile","level","chromaFormat","sarNum","sarDen","metadata","segments","segmentCount","hasKeyframesIndex","keyframesIndex","isComplete","audioInfoComplete","videoInfoComplete","isSeekable","ExpGolomb","TAG","constructor","_buffer","_buffer_index","_total_bytes","byteLength","_total_bits","_current_word","_current_word_bits_left","destroy","_fillCurrentWord","buffer_bytes_left","IllegalStateException","bytes_read","Math","min","word","set","subarray","readBits","bits","InvalidArgumentException","result","bits_need_left","bits_read_next","result2","readBool","readByte","_skipLeadingZero","zero_count","readUEG","leading_zeros","readSEG","SPSParser","_ebsp2rbsp","src","src_length","dst","dst_idx","parseSPS","rbsp","gb","profile_idc","level_idc","profile_string","getProfileString","level_string","getLevelString","chroma_format_idc","chroma_format","chroma_format_table","bit_depth","scaling_list_count","_skipScalingList","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","frame_cropping_flag","sar_width","sar_height","fps_fixed","fps_num","fps_den","vui_parameters_present_flag","aspect_ratio_idc","sar_w_table","sar_h_table","num_units_in_tick","time_scale","sarScale","crop_unit_x","crop_unit_y","sub_wc","sub_hc","codec_width","codec_height","present_width","ceil","chroma_format_string","getChromaFormatString","frame_rate","fixed","sar_ratio","codec_size","present_size","count","last_scale","next_scale","delta_scale","toFixed","chroma","tagDemux","_config","_onError","_onMediaInfo","_onTrackMetadata","_onDataAvailable","_dataOffset","_firstParse","_dispatch","_hasAudio","_hasVideo","_audioInitialMetadataDispatched","_videoInitialMetadataDispatched","_mediaInfo","mediainfo","_metadata","_audioMetadata","_videoMetadata","_naluLengthSize","_timestampBase","_timescale","_duration","_durationOverrided","_referenceFrameRate","_videoTrack","id","sequenceNumber","addcoefficient","samples","_audioTrack","_littleEndian","onMediaInfo","callback","_parseScriptData","obj","scriptData","hasOwnProperty","onMetaData","audiodatarate","videodatarate","floor","framerate","_typeof","keyframes","times","filepositions","_parseKeyframesIndex","moofTag","tags","parseChunks","_isInitialMetadataDispatched","flvtag","_parseAudioData","_parseVideoData","tagTimestamp","tagPosition","spec","frameType","codecId","DemuxErrors","CODEC_UNSUPPORTED","concat","_parseAVCVideoPacket","packetType","cts","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","FORMAT_ERROR","meta","track","timescale","avcc","version","avcProfile","spsCount","len","sps","config","codecWidth","codecHeight","presentWidth","presentHeight","bitDepth","sarRatio","frameRate","refSampleDuration","codecArray","codecString","j","h","codec","mi","ppsCount","timestampBase","units","lengthSize","dts","keyframe","naluSize","unitType","unit","avcSample","isKeyframe","pts","fileposition","soundSpec","soundFormat","soundRate","soundRateIndex","soundRateTable","soundType","channelCount","aacData","_parseAACAudioData","misc","samplingRate","originalAudioObjectType","aacSample","_parseAACAudioSpecificConfig","mpegSamplingRates","audioObjectType","samplingIndex","extensionSamplingIndex","samplingFrequence","channelConfig","userAgent","self","navigator","toLowerCase","indexOf","Array","FlvParse","tempUint8","arrTag","index","tempArr","stop","frist","setFlv","probe","read","parse","mismatch","match","hasAudioTrack","hasVideoTrack","t","tag","getBodySum","u8a","slice","_str","MP4","init","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","charCodeAt","constants","FTYP","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","box","datas","prototype","call","arguments","arrayCount","generateInitSegment","vtrak","atrak","trackId","xmhd","sampleRate","configSize","baseMediaDecodeTime","sampleCount","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","isNonSync","AAC","getSilentFrame","Browser","detect","ua","exec","platform_match","matched","browser","majorVersion","platform","versionArray","split","major","string","minor","build","chrome","opr","safari","webkit","rv","iemobile","msie","edge","msedge","opera","android","Object","assign","SampleInfo","originalDts","isSync","isSyncPoint","MediaSegmentInfo","beginDts","endDts","beginPts","endPts","originalBeginDts","originalEndDts","syncPoints","firstSample","lastSample","appendSyncPoint","sampleInfo","MediaSegmentInfoList","_type","_list","_lastAppendLocation","get","isEmpty","clear","_searchNearestSegmentBefore","list","last","mid","lbound","ubound","idx","_searchNearestSegmentAfter","append","mediaSegmentInfo","msi","lastAppendIdx","insertIdx","splice","getLastSegmentBefore","getLastSampleBefore","segment","getLastSyncPointBefore","segmentIdx","MP4Remuxer","_isLive","isLive","_dtsBase","_dtsBaseInited","_audioDtsBase","Infinity","_videoDtsBase","_audioNextDts","_videoNextDts","_audioMeta","_videoMeta","_audioSegmentInfoList","_videoSegmentInfoList","_onInitSegment","_onMediaSegment","_forceFirstIDR","_fillSilentAfterSeek","bindDataSource","producer","onDataAvailable","remux","bind","onTrackMetadata","_onTrackMetadataReceived","insertDiscontinuity","seek","audioTrack","videoTrack","_calculateDtsBase","_remuxVideo","_remuxAudio","metabox","Log","container","dtsCorrection","firstDts","lastDts","remuxSilentFrame","silentFrameDuration","bytes","mdatbox","mp4Samples","shift","distance","expectedDts","videoSegment","unshift","frame","_generateSilentAudio","mp4Sample","sampleDuration","nextDts","latest","info","moofbox","_mergeBoxes","frameDuration","w","firstPts","lastPts","sampleSize","syncPoint","flv2fmp4","onInitSegment","onMediaSegment","seekCallBack","loadmetadata","ftyp_moov","metaSuccRun","metas","parseChunk","_pendingResolveSeekPoint","_tempBaseTime","setflvBase","setflvBasefrist","tagdemux","Metadata","metaSucc","m4mof","mp4moof","onMdiaSegment","baseTime","arraybuff","flvparse","setflvBaseUsually","seekpoint","mp4remux","audiotrack","videotrack","setflv","setflvloc","foreign","f2m","_seekCallBack","basetime","fun","temp","window","flvParse","mp4File","succ","tracks","mp4Init","setLocFlv","uin8"],"mappings":"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"}